#!/usr/bin/env tsx

/**
 * Script to generate TypeScript types for translation keys
 * 
 * Usage:
 *   pnpm tsx scripts/generate-i18n-types.ts
 */

import fs from 'fs';
import path from 'path';

const MESSAGES_DIR = path.join(process.cwd(), 'src/messages');
const OUTPUT_FILE = path.join(process.cwd(), 'src/types/i18n.ts');

/**
 * Load all translation keys from a locale
 */
function loadTranslationKeys(locale: string): Set<string> {
  const keys = new Set<string>();
  const localePath = path.join(MESSAGES_DIR, locale);
  
  if (!fs.existsSync(localePath)) {
    throw new Error(`Locale directory not found: ${localePath}`);
  }

  const files = fs.readdirSync(localePath).filter(f => f.endsWith('.json'));

  for (const file of files) {
    const filePath = path.join(localePath, file);
    const content = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    
    Object.keys(content).forEach(key => keys.add(key));
  }

  return keys;
}

/**
 * Generate TypeScript type definition
 */
function generateTypeDefinition(keys: Set<string>): string {
  const sortedKeys = Array.from(keys).sort();
  
  const typeDefinition = `/**
 * Auto-generated translation keys
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * Generated by: scripts/generate-i18n-types.ts
 * Generated at: ${new Date().toISOString()}
 */

export type TranslationKey =
${sortedKeys.map(key => `  | "${key}"`).join('\n')};

/**
 * Type-safe translation function
 */
export type TranslateFn = (key: TranslationKey, values?: Record<string, string | number>) => string;
`;

  return typeDefinition;
}

/**
 * Main function
 */
function main() {
  try {
    console.log('üîß Generating i18n TypeScript types...\n');

    const keys = loadTranslationKeys('ja');
    
    console.log(`Found ${keys.size} translation keys`);

    const typeDefinition = generateTypeDefinition(keys);
    
    const outputDir = path.dirname(OUTPUT_FILE);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    fs.writeFileSync(OUTPUT_FILE, typeDefinition, 'utf-8');
    
    console.log(`‚úÖ Types generated successfully: ${path.relative(process.cwd(), OUTPUT_FILE)}\n`);
  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

main();
