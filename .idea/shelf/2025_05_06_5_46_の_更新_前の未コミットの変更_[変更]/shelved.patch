Index: src/hooks/features/user/useUserPortfolios.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_USER_WITH_DETAILS_AND_PORTFOLIOS } from '@/graphql/queries/user';\nimport { useLoading } from '@/hooks/core/useLoading';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\n\ntype PortfolioType = 'opportunity' | 'activity_report' | 'quest';\ntype PortfolioCategory = 'QUEST' | 'ACTIVITY_REPORT' | 'INTERVIEW' | 'OPPORTUNITY';\ntype ReservationStatus = 'RESERVED' | 'CANCELED' | 'COMPLETED';\n\ninterface Portfolio {\n  id: string;\n  type: PortfolioType;\n  title: string;\n  date: string;\n  location: string | null;\n  category: PortfolioCategory;\n  reservationStatus?: ReservationStatus | null;\n  participants: Array<{\n    id: string;\n    name: string;\n    image: string | null;\n  }>;\n  image: string | null;\n  source?: string;\n}\n\ninterface GqlPortfolio {\n  id: string;\n  title: string;\n  category: string;\n  date: string;\n  thumbnailUrl: string | null;\n  source?: string;\n  reservationStatus?: string | null;\n  place?: {\n    name: string;\n  } | null;\n  participants: Array<{\n    id: string;\n    name: string;\n    image: string | null;\n  }>;\n}\n\nconst ITEMS_PER_PAGE = 30;\n\nconst isValidPortfolioType = (category: string): category is PortfolioType => {\n  return ['opportunity', 'activity_report', 'quest'].includes(category.toLowerCase());\n};\n\nconst isValidPortfolioCategory = (category: string): category is PortfolioCategory => {\n  return ['QUEST', 'ACTIVITY_REPORT', 'INTERVIEW', 'OPPORTUNITY'].includes(category.toUpperCase());\n};\n\nconst transformPortfolio = (portfolio: GqlPortfolio): Portfolio => {\n  const category = portfolio.category.toLowerCase();\n  if (!isValidPortfolioType(category)) {\n    console.warn(`Invalid portfolio category: ${portfolio.category}`);\n  }\n\n  const portfolioCategory = portfolio.category.toUpperCase();\n  if (!isValidPortfolioCategory(portfolioCategory)) {\n    console.warn(`Invalid portfolio category: ${portfolio.category}`);\n  }\n  \n  return {\n    id: portfolio.id,\n    type: category as PortfolioType,\n    title: portfolio.title,\n    date: format(new Date(portfolio.date), 'yyyy/MM/dd'),\n    location: portfolio.place?.name ?? null,\n    category: portfolioCategory as PortfolioCategory,\n    reservationStatus: portfolio.reservationStatus as ReservationStatus | null | undefined,\n    participants: portfolio.participants.map(p => ({\n      id: p.id,\n      name: p.name,\n      image: p.image ?? null\n    })),\n    image: portfolio.thumbnailUrl ?? null,\n    source: portfolio.source\n  };\n};\n\n/**\n * Custom hook for fetching and managing user portfolios\n * @param userId User ID to fetch portfolios for\n */\nexport const useUserPortfolios = (userId: string) => {\n  const { setIsLoading } = useLoading();\n  const [portfolios, setPortfolios] = useState<Portfolio[]>([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const observer = useRef<IntersectionObserver | null>(null);\n  const lastPortfolioRef = useRef<HTMLDivElement | null>(null);\n  \n  interface UserWithPortfoliosData {\n    user?: {\n      id: string;\n      name: string;\n      image: string | null;\n      bio: string | null;\n      sysRole: string | null;\n      currentPrefecture: string | null;\n      portfolios?: {\n        edges: Array<{\n          node: GqlPortfolio | null;\n          cursor: string;\n        }>;\n        pageInfo: {\n          hasNextPage: boolean;\n          endCursor: string;\n        };\n      };\n      opportunitiesCreatedByMe?: {\n        edges: Array<{\n          node: {\n            id: string;\n            title: string;\n            description: string;\n            images: string[];\n            feeRequired?: number | null;\n            isReservableWithTicket?: boolean | null;\n            place?: {\n              name: string;\n            } | null;\n            community?: {\n              id: string;\n              name: string;\n              image: string | null;\n            } | null;\n          } | null;\n        }>;\n      };\n    };\n  }\n\n  const { data, loading, error, fetchMore } = useQuery<UserWithPortfoliosData>(\n    GET_USER_WITH_DETAILS_AND_PORTFOLIOS,\n    {\n      variables: { \n        id: userId,\n        first: ITEMS_PER_PAGE,\n        after: null,\n        filter: null,\n        sort: { date: \"DESC\" }\n      },\n      fetchPolicy: \"network-only\",\n      skip: !userId\n    }\n  );\n\n  useEffect(() => {\n    setIsLoading(loading);\n  }, [loading, setIsLoading]);\n\n  useEffect(() => {\n    if (data?.user?.portfolios?.edges) {\n      const initialPortfolios = data.user.portfolios.edges\n        .map((edge: { node: GqlPortfolio | null; cursor: string }) => edge?.node)\n        .filter((node: GqlPortfolio | null): node is GqlPortfolio => node != null)\n        .map(transformPortfolio);\n      \n      setPortfolios(initialPortfolios);\n      setHasMore(data.user.portfolios.pageInfo.hasNextPage);\n    }\n  }, [data]);\n\n  const loadMore = useCallback(async () => {\n    if (!hasMore || isLoadingMore) {\n      return;\n    }\n\n    setIsLoadingMore(true);\n    const lastPortfolio = portfolios[portfolios.length - 1];\n    const lastCursor = data?.user?.portfolios?.edges?.find(\n      (edge: { node: GqlPortfolio | null; cursor: string }) => edge?.node?.id === lastPortfolio.id\n    )?.cursor;\n\n    try {\n      const { data: moreData } = await fetchMore({\n        variables: {\n          id: userId,\n          first: ITEMS_PER_PAGE,\n          after: lastCursor,\n          filter: null,\n          sort: { date: \"DESC\" }\n        }\n      });\n\n      if (moreData?.user?.portfolios?.edges) {\n        const newPortfolios = moreData.user.portfolios.edges\n          .map((edge: { node: GqlPortfolio | null; cursor: string }) => edge?.node)\n          .filter((node: GqlPortfolio | null): node is GqlPortfolio => node != null)\n          .map(transformPortfolio);\n\n        setPortfolios(prev => [...prev, ...newPortfolios]);\n        \n        const newHasMore = moreData.user.portfolios.pageInfo.hasNextPage;\n        setHasMore(newHasMore);\n      }\n    } catch (error) {\n      console.error('Error loading more portfolios:', error);\n      toast.error('ポートフォリオの読み込みに失敗しました');\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [fetchMore, hasMore, isLoadingMore, userId, portfolios, data]);\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && hasMore && !isLoadingMore) {\n          loadMore();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (lastPortfolioRef.current) {\n      observer.current.observe(lastPortfolioRef.current);\n    }\n\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [hasMore, isLoadingMore, portfolios.length, loadMore]);\n\n  const handleError = useCallback(() => {\n    if (error) {\n      console.error('Error fetching user portfolios:', error);\n      toast.error('ポートフォリオの取得に失敗しました');\n    }\n  }, [error]);\n\n  useEffect(() => {\n    handleError();\n  }, [handleError]);\n\n  const getActiveOpportunities = () => {\n    return data?.user?.opportunitiesCreatedByMe?.edges?.map((edge: { \n      node: {\n        id: string;\n        title: string;\n        description: string;\n        images: string[];\n        feeRequired?: number | null;\n        isReservableWithTicket?: boolean | null;\n        place?: { name: string } | null;\n        community?: {\n          id: string;\n          name: string;\n          image: string | null;\n        } | null;\n      } | null;\n    }) => {\n      const node = edge?.node;\n      if (!node) return null;\n      return {\n        id: node.id,\n        title: node.title,\n        price: node.feeRequired ?? null,\n        location: node.place?.name ?? '',\n        imageUrl: node.images?.[0] ?? null,\n        community: node.community,\n        isReservableWithTicket: node.isReservableWithTicket\n      };\n    }).filter(Boolean) ?? [];\n  };\n\n  return {\n    portfolios,\n    isLoading: loading,\n    isLoadingMore,\n    hasMore,\n    error,\n    lastPortfolioRef,\n    loadMore,\n    activeOpportunities: getActiveOpportunities(),\n    userData: data?.user\n  };\n};\n\nexport default useUserPortfolios;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/features/user/useUserPortfolios.ts b/src/hooks/features/user/useUserPortfolios.ts
--- a/src/hooks/features/user/useUserPortfolios.ts	(revision ac5ad550973a26033c0514fae8350508b80d44e9)
+++ b/src/hooks/features/user/useUserPortfolios.ts	(date 1746476786845)
@@ -6,6 +6,7 @@
 import { useLoading } from '@/hooks/core/useLoading';
 import { toast } from 'sonner';
 import { format } from 'date-fns';
+import { SortDirection } from "@/gql/graphql";
 
 type PortfolioType = 'opportunity' | 'activity_report' | 'quest';
 type PortfolioCategory = 'QUEST' | 'ACTIVITY_REPORT' | 'INTERVIEW' | 'OPPORTUNITY';
@@ -146,7 +147,7 @@
         first: ITEMS_PER_PAGE,
         after: null,
         filter: null,
-        sort: { date: "DESC" }
+        sort: { date: SortDirection.Desc }
       },
       fetchPolicy: "network-only",
       skip: !userId
@@ -187,7 +188,7 @@
           first: ITEMS_PER_PAGE,
           after: lastCursor,
           filter: null,
-          sort: { date: "DESC" }
+          sort: { date: SortDirection.Desc }
         }
       });
 
