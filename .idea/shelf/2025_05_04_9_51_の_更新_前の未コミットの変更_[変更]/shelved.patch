Index: src/app/components/features/places/PlaceMapView.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use client';\n\nimport React from 'react';\nimport dynamic from 'next/dynamic';\nimport { Membership } from '../../../../hooks/usePlaces';\nimport PlaceToggleButton from './PlaceToggleButton';\nimport { PlaceList } from './PlaceList';\nimport PlaceCardsSheet from './PlaceCardsSheet';\n\nconst MapComponent = dynamic(\n  () => import('./MapComponent').then((mod) => mod.default),\n  { ssr: false }\n);\n\ninterface PlaceMapViewProps {\n  memberships: Membership[];\n  selectedPlaceId: string | null;\n  onPlaceSelect: (placeId: string) => void;\n  onClose: () => void;\n  toggleMode: () => void;\n  places: Array<{\n    placeId: string;\n    title: string;\n    address: string;\n    participantCount: number;\n    description: string;\n    image: string;\n    bio?: string;\n    userId: string;\n    activeOpportunityCount?: number;\n  }>;\n}\n\nconst PlaceMapView: React.FC<PlaceMapViewProps> = ({\n  memberships,\n  selectedPlaceId,\n  onPlaceSelect,\n  onClose,\n  toggleMode,\n  places\n}) => {\n  return (\n    <div className=\"relative h-full w-full\">\n      <MapComponent \n        memberships={memberships} \n        selectedPlaceId={selectedPlaceId}\n        onPlaceSelect={onPlaceSelect}\n      />\n      {!selectedPlaceId && (\n        <>\n          <PlaceToggleButton isMapMode={true} onClick={toggleMode} />\n          <PlaceList \n            memberships={memberships} \n            isMapMode={true} \n            selectedPlaceId={selectedPlaceId}\n          />\n        </>\n      )}\n      {selectedPlaceId && (\n        <PlaceCardsSheet\n          places={places}\n          selectedPlaceId={selectedPlaceId}\n          onClose={onClose}\n          onPlaceSelect={onPlaceSelect}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PlaceMapView;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/components/features/places/PlaceMapView.tsx b/src/app/components/features/places/PlaceMapView.tsx
--- a/src/app/components/features/places/PlaceMapView.tsx	(revision 2db478bf902e38643996cecbaed4fe05e303f00a)
+++ b/src/app/components/features/places/PlaceMapView.tsx	(date 1746299708053)
@@ -2,7 +2,7 @@
 
 import React from 'react';
 import dynamic from 'next/dynamic';
-import { Membership } from '../../../../hooks/usePlaces';
+import { Membership } from "@/hooks/usePlaces";
 import PlaceToggleButton from './PlaceToggleButton';
 import { PlaceList } from './PlaceList';
 import PlaceCardsSheet from './PlaceCardsSheet';
Index: src/app/places/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use client';\n\nimport ErrorState from '@/app/components/shared/ErrorState';\nimport { usePlaces } from '@/hooks/usePlaces';\nimport PlaceMapView from '../components/features/places/PlaceMapView';\nimport PlaceListView from '../components/features/places/PlaceListView';\nimport { useHeaderConfig } from '@/hooks/useHeaderConfig';\n\nexport default function PlacesPage() {\n  useHeaderConfig({\n    title: '拠点',\n    showBackButton: false,\n    showLogo: true,\n    showSearchForm: false\n  });\n\n  const {\n    memberships,\n    places,\n    selectedPlaceId,\n    mode,\n    loading,\n    error,\n    handlePlaceSelect,\n    handleClose,\n    toggleMode,\n    totalPlaces\n  } = usePlaces();\n  \n  if (error) return <ErrorState message={error.message} />;\n\n  return (\n    <div className=\"h-screen w-full\">\n      {mode === 'list' ? (\n        <PlaceListView\n          memberships={memberships}\n          toggleMode={toggleMode}\n        />\n      ) : (\n        <PlaceMapView\n          memberships={memberships}\n          selectedPlaceId={selectedPlaceId}\n          onPlaceSelect={handlePlaceSelect}\n          onClose={handleClose}\n          toggleMode={toggleMode}\n          places={places}\n        />\n      )}\n    </div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/places/page.tsx b/src/app/places/page.tsx
--- a/src/app/places/page.tsx	(revision 2db478bf902e38643996cecbaed4fe05e303f00a)
+++ b/src/app/places/page.tsx	(date 1746299708072)
@@ -7,13 +7,6 @@
 import { useHeaderConfig } from '@/hooks/useHeaderConfig';
 
 export default function PlacesPage() {
-  useHeaderConfig({
-    title: '拠点',
-    showBackButton: false,
-    showLogo: true,
-    showSearchForm: false
-  });
-
   const {
     memberships,
     places,
Index: src/app/components/features/places/MapComponent.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useCallback, useMemo, useState, useEffect } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\nimport PlaceCardsSheet from './PlaceCardsSheet';\nimport { ContentType } from \"@/types\";\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n};\n\ninterface Geo {\n  latitude: string;\n  longitude: string;\n  placeId: string;\n  placeImage: string;\n  placeName: string;\n}\n\ninterface MarkerData {\n  position: {\n    lat: number;\n    lng: number;\n  };\n  id: string;\n  placeImage: string;\n  userImage: string;\n  contentType: ContentType;\n  name: string;\n  placeId: string;\n  participantCount: number;\n}\n\ninterface MembershipNode {\n  node: {\n    user: {\n      id: string;\n      image: string;\n      name: string;\n      opportunitiesCreatedByMe?: {\n        edges: Array<{\n          node: {\n            id: string;\n            publishStatus: string;\n          };\n        }>;\n      };\n    };\n    headline?: string;\n    bio?: string;\n    participationView: {\n      participated: {\n        geo: Geo[];\n        totalParticipatedCount: number;\n      };\n      hosted: {\n        geo: Geo[];\n        totalParticipantCount: number;\n      };\n    };\n  };\n}\n\ninterface MarkerType {\n  position: google.maps.LatLngLiteral;\n  id: string;\n  icon: {\n    url: string;\n    scaledSize: google.maps.Size;\n    anchor: google.maps.Point;\n  };\n  contentType: ContentType;\n}\n\n// デフォルトの画像URL（CORS対応のサービスを使用）\nconst defaultImageUrl = \"https://via.placeholder.com/200\";\n\nconst drawCircleWithImage = async (\n  ctx: CanvasRenderingContext2D,\n  img: HTMLImageElement,\n  cx: number,\n  cy: number,\n  radius: number,\n  isMainImage: boolean\n): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const loadImage = (src: string) => {\n      img.crossOrigin = \"anonymous\";\n      img.src = src;\n    };\n\n    img.onload = () => {\n      try {\n        // 外側の円（グラデーション）\n        const gradient = ctx.createRadialGradient(\n          cx,\n          cy,\n          radius - 2,\n          cx,\n          cy,\n          radius + 2\n        );\n        gradient.addColorStop(0, \"#FFFFFF\");\n        gradient.addColorStop(1, \"#EEEEEE\");\n\n        // 円を描画\n        ctx.beginPath();\n        ctx.arc(cx, cy, radius + 2, 0, 2 * Math.PI);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n\n        // 画像用のクリッピング\n        ctx.save();\n        ctx.beginPath();\n        ctx.arc(cx, cy, radius, 0, 2 * Math.PI);\n        ctx.clip();\n\n        // 画像を描画\n        const imgSize = radius * 2;\n        const imgAspect = img.width / img.height;\n        let sourceX = 0;\n        let sourceY = 0;\n        let sourceWidth = img.width;\n        let sourceHeight = img.height;\n\n        if (imgAspect > 1) {\n          sourceWidth = sourceHeight;\n          sourceX = (img.width - sourceWidth) / 2;\n        } else if (imgAspect < 1) {\n          sourceHeight = sourceWidth;\n          sourceY = (img.height - sourceHeight) / 2;\n        }\n\n        ctx.drawImage(\n          img,\n          sourceX,\n          sourceY,\n          sourceWidth,\n          sourceHeight,\n          cx - imgSize / 2,\n          cy - imgSize / 2,\n          imgSize,\n          imgSize\n        );\n\n        ctx.restore();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    img.onerror = () => {\n      // エラー時はデフォルト画像を試す\n      if (img.src !== defaultImageUrl) {\n        loadImage(defaultImageUrl);\n      } else {\n        // デフォルト画像も読み込めない場合は、グレーの円を描画\n        try {\n          ctx.beginPath();\n          ctx.arc(cx, cy, radius, 0, 2 * Math.PI);\n          ctx.fillStyle = isMainImage ? \"#F0F0F0\" : \"#E0E0E0\";\n          ctx.fill();\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      }\n    };\n\n    // 最初の画像読み込みを開始\n    loadImage(img.src);\n  });\n};\n\n// カスタムマーカーSVGを生成する関数\nconst createCustomMarkerIcon = async (placeImage: string, userImage: string, isSelected: boolean = false): Promise<google.maps.Icon | null> => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) return null;\n\n  // サイズ設定\n  const displaySize = isSelected ? 80 : 56;  // 選択時は80px、非選択時は56px\n  const scale = 2;        // 高解像度用のスケール\n\n  const canvasWidth = displaySize * scale;\n  const canvasHeight = displaySize * scale;\n\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n  canvas.style.width = `${displaySize}px`;\n  canvas.style.height = `${displaySize}px`;\n\n  context.scale(scale, scale);\n\n  try {\n    const centerX = displaySize / 2;\n    const centerY = displaySize / 2;\n    const mainRadius = displaySize / 2 - 2;\n    const smallRadius = mainRadius * 0.4;\n    const smallX = centerX + mainRadius * 0.5;\n    const smallY = centerY + mainRadius * 0.5;\n\n    // メイン画像の描画\n    const mainImg = document.createElement(\"img\");\n    mainImg.src = placeImage || defaultImageUrl;\n    await drawCircleWithImage(context, mainImg, centerX, centerY, mainRadius, true);\n\n    // ユーザー画像の描画\n    const userImg = document.createElement(\"img\");\n    userImg.src = userImage || defaultImageUrl;\n    await drawCircleWithImage(context, userImg, smallX, smallY, smallRadius, false);\n\n    return {\n      url: canvas.toDataURL(\"image/png\", 1.0),\n      scaledSize: new google.maps.Size(displaySize, displaySize),\n      anchor: new google.maps.Point(displaySize / 2, displaySize / 2),\n    };\n\n  } catch (error) {\n    console.warn(\"Failed to create marker icon:\", error);\n    const centerX = displaySize / 2;\n    const centerY = displaySize / 2;\n\n    context.beginPath();\n    context.arc(centerX, centerY, displaySize / 2 - 4, 0, 2 * Math.PI);\n    context.fillStyle = \"#F0F0F0\";\n    context.fill();\n    context.strokeStyle = \"#E0E0E0\";\n    context.lineWidth = 2;\n    context.stroke();\n\n    return {\n      url: canvas.toDataURL(\"image/png\", 1.0),\n      scaledSize: new google.maps.Size(displaySize, displaySize),\n      anchor: new google.maps.Point(displaySize / 2, displaySize / 2),\n    };\n  }\n};\n\n// カスタムマーカーコンポーネント\nconst CustomMarker: React.FC<{\n  data: MarkerData;\n  onClick: () => void;\n  isSelected: boolean;\n}> = ({ data, onClick, isSelected }) => {\n  const [icon, setIcon] = useState<google.maps.Icon | null>(null);\n  const [currentSize, setCurrentSize] = useState<number>(56);\n\n  useEffect(() => {\n    if (isSelected && currentSize !== 80) {\n      setCurrentSize(80);\n    } else if (!isSelected && currentSize !== 56) {\n      // 選択が解除された時のみサイズを小さくする\n      setCurrentSize(56);\n    }\n  }, [isSelected]);\n\n  useEffect(() => {\n    const loadIcon = async () => {\n      const displaySize = currentSize;\n      const scale = 2;\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n      if (!context) return;\n\n      const canvasWidth = displaySize * scale;\n      const canvasHeight = displaySize * scale;\n\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      canvas.style.width = `${displaySize}px`;\n      canvas.style.height = `${displaySize}px`;\n\n      context.scale(scale, scale);\n\n      try {\n        const centerX = displaySize / 2;\n        const centerY = displaySize / 2;\n        const mainRadius = displaySize / 2 - 2;\n        const smallRadius = mainRadius * 0.4;\n        const smallX = centerX + mainRadius * 0.5;\n        const smallY = centerY + mainRadius * 0.5;\n\n        // メイン画像の描画\n        const mainImg = document.createElement(\"img\");\n        mainImg.src = data.placeImage || defaultImageUrl;\n        await drawCircleWithImage(context, mainImg, centerX, centerY, mainRadius, true);\n\n        // ユーザー画像の描画\n        const userImg = document.createElement(\"img\");\n        userImg.src = data.userImage || defaultImageUrl;\n        await drawCircleWithImage(context, userImg, smallX, smallY, smallRadius, false);\n\n        setIcon({\n          url: canvas.toDataURL(\"image/png\", 1.0),\n          scaledSize: new google.maps.Size(displaySize, displaySize),\n          anchor: new google.maps.Point(displaySize / 2, displaySize / 2),\n        });\n      } catch (error) {\n        console.warn(\"Failed to create marker icon:\", error);\n        // フォールバック処理\n        context.beginPath();\n        context.arc(displaySize / 2, displaySize / 2, displaySize / 2 - 4, 0, 2 * Math.PI);\n        context.fillStyle = \"#F0F0F0\";\n        context.fill();\n        context.strokeStyle = \"#E0E0E0\";\n        context.lineWidth = 2;\n        context.stroke();\n\n        setIcon({\n          url: canvas.toDataURL(\"image/png\", 1.0),\n          scaledSize: new google.maps.Size(displaySize, displaySize),\n          anchor: new google.maps.Point(displaySize / 2, displaySize / 2),\n        });\n      }\n    };\n\n    loadIcon();\n  }, [currentSize, data.placeImage, data.userImage]);\n\n  if (!icon) return null;\n\n  return (\n    <Marker\n      position={data.position}\n      icon={icon}\n      onClick={onClick}\n      zIndex={isSelected ? 2 : 1} // 選択されたマーカーを前面に表示\n    />\n  );\n};\n\nimport { Membership } from '@/hooks/usePlaces';\n\ninterface Props {\n  memberships: Membership[];\n  selectedPlaceId?: string | null;\n  onPlaceSelect?: (placeId: string) => void;\n}\n\nexport default function MapComponent({ memberships, selectedPlaceId, onPlaceSelect }: Props) {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || 'YOUR_FALLBACK_API_KEY' // Add a fallback key\n  });\n\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [markers, setMarkers] = useState<MarkerData[]>([]);\n  const [center, setCenter] = useState<google.maps.LatLngLiteral>({\n    lat: 33.75,  // 四国のおおよその中心緯度\n    lng: 133.5,  // 四国のおおよその中心経度\n  });\n\n  // 選択された場所にズームする\n  useEffect(() => {\n    if (map && selectedPlaceId) {\n      const selectedMarker = markers.find(marker => marker.placeId === selectedPlaceId);\n      if (selectedMarker) {\n        // シートの高さを計算（画面の45%）\n        const sheetHeight = window.innerHeight * 0.45;\n        \n        // マップのコンテナの高さを取得\n        const mapDiv = map.getDiv();\n        const mapHeight = mapDiv.clientHeight;\n        \n        // マーカーの位置を取得\n        const markerLatLng = new google.maps.LatLng(\n          selectedMarker.position.lat,\n          selectedMarker.position.lng\n        );\n        \n        // よりズームした状態で表示\n        map.setZoom(17);\n        \n        // マーカーの位置から、シートの高さの25%分下にオフセットした位置を計算\n        // これにより、マーカーは見える部分の地図のちょうど中央に表示される\n        const offsetRatio = (sheetHeight * 0.25) / mapHeight;\n        const bounds = map.getBounds();\n        if (bounds) {\n          const ne = bounds.getNorthEast();\n          const sw = bounds.getSouthWest();\n          const latSpan = ne.lat() - sw.lat();\n          const latOffset = latSpan * offsetRatio;\n          \n          // 新しい中心位置を計算（オフセットを負の値にして下方向に移動）\n          const newCenter = new google.maps.LatLng(\n            selectedMarker.position.lat - latOffset,\n            selectedMarker.position.lng\n          );\n          \n          // 地図の中心を移動\n          map.panTo(newCenter);\n        }\n      }\n    }\n  }, [selectedPlaceId, markers, map]);\n\n  const onLoad = useCallback(function callback(map: google.maps.Map) {\n    setMap(map);\n  }, []);\n\n  const onUnmount = useCallback(function callback() {\n    setMap(null);\n  }, []);\n\n  useEffect(() => {\n    const loadMarkers = async () => {\n      console.log('Memberships for markers:', memberships);\n      const allMarkers: MarkerData[] = [];\n      const allPlaces: Array<{\n        placeId: string;\n        title: string;\n        address: string;\n        participantCount: number;\n        description: string;\n        image: string;\n        bio: string;\n        userId: string;\n        activeOpportunityCount: number;\n      }> = [];\n\n      memberships.forEach(({ node }) => {\n        // アクティブな募集数を計算\n        const activeOpportunityCount = node.user.opportunitiesCreatedByMe?.edges\n          .filter(edge => edge.node.publishStatus === 'PUBLIC')\n          .length || 0;\n\n        // 参加したイベントのマーカー\n        node.participationView.participated.geo.forEach(location => {\n          const lat = location.latitude as unknown as number;\n          const lng = location.longitude as unknown as number;\n          \n          const numLat = Number(lat);\n          const numLng = Number(lng);\n          \n          if (isNaN(numLat) || isNaN(numLng)) {\n            console.warn('Invalid coordinates:', location);\n            return;\n          }\n          \n          const marker: MarkerData = {\n            position: {\n              lat: numLat,\n              lng: numLng,\n            },\n            id: `${node.user.name}-${location.placeId}-participated`,\n            placeImage: location.placeImage,\n            userImage: node.user.image,\n            contentType: \"EXPERIENCE\" as ContentType,\n            name: node.user.name,\n            placeId: location.placeId,\n            participantCount: node.participationView.participated.totalParticipatedCount,\n          };\n          \n          allMarkers.push(marker);\n          allPlaces.push({\n            placeId: location.placeId,\n            title: node.user.name,\n            address: node.participationView.participated.geo[0]?.placeName || \"住所不明\",\n            participantCount: node.participationView.participated.totalParticipatedCount,\n            description: \"イベントの説明\",\n            image: location.placeImage,\n            bio: node.bio || \"\",\n            userId: node.user.id,\n            activeOpportunityCount\n          });\n        });\n\n        // 主催したイベントのマーカー\n        node.participationView.hosted.geo.forEach(location => {\n          const lat = location.latitude as unknown as number;\n          const lng = location.longitude as unknown as number;\n          \n          const numLat = Number(lat);\n          const numLng = Number(lng);\n          \n          if (isNaN(numLat) || isNaN(numLng)) {\n            console.warn('Invalid coordinates:', location);\n            return;\n          }\n          \n          const marker: MarkerData = {\n            position: {\n              lat: numLat,\n              lng: numLng,\n            },\n            id: `${node.user.name}-${location.placeId}-hosted`,\n            placeImage: location.placeImage,\n            userImage: node.user.image,\n            contentType: \"EXPERIENCE\" as ContentType,\n            name: node.user.name,\n            placeId: location.placeId,\n            participantCount: node.participationView.hosted.totalParticipantCount,\n          };\n          \n          allMarkers.push(marker);\n          allPlaces.push({\n            placeId: location.placeId,\n            title: node.user.name,\n            address: node.participationView.participated.geo[0]?.placeName || \"住所不明\",\n            participantCount: node.participationView.hosted.totalParticipantCount,\n            description: \"イベントの説明\",\n            image: location.placeImage,\n            bio: node.bio || \"\",\n            userId: node.user.id,\n            activeOpportunityCount\n          });\n        });\n      });\n\n      console.log('Loading markers:', allMarkers.length);\n      setMarkers(allMarkers);\n      setPlaces(allPlaces);\n    };\n\n    loadMarkers();\n  }, [memberships]);\n\n  // places stateを追加\n  const [places, setPlaces] = useState<Array<{\n    placeId: string;\n    title: string;\n    address: string;\n    participantCount: number;\n    description: string;\n    image: string;\n    bio: string;\n    userId: string;\n    activeOpportunityCount: number;\n  }>>([]);\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={center}\n      zoom={9}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n      options={{\n        zoomControl: true,\n        mapTypeControl: false,\n        streetViewControl: false,\n        fullscreenControl: false,\n      }}\n    >\n      {markers.map((marker) => (\n        <CustomMarker\n          key={marker.id}\n          data={marker}\n          onClick={() => onPlaceSelect?.(marker.placeId)}\n          isSelected={marker.placeId === selectedPlaceId}\n        />\n      ))}\n    </GoogleMap>\n  ) : <></>;\n}                                
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/components/features/places/MapComponent.tsx b/src/app/components/features/places/MapComponent.tsx
--- a/src/app/components/features/places/MapComponent.tsx	(revision 2db478bf902e38643996cecbaed4fe05e303f00a)
+++ b/src/app/components/features/places/MapComponent.tsx	(date 1746299877935)
@@ -1,6 +1,5 @@
 import { useCallback, useMemo, useState, useEffect } from 'react';
 import { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';
-import PlaceCardsSheet from './PlaceCardsSheet';
 import { ContentType } from "@/types";
 
 const containerStyle = {
