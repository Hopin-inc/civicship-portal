/* eslint-disable */
import * as types from "./graphql";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  "\n  query currentUser {\n    currentUser {\n      user {\n        id\n        name\n      }\n    }\n  }\n":
    types.CurrentUserDocument,
  "\n  fragment OpportunityFields on Opportunity {\n    id\n    title\n    description\n    image\n    place {\n      id\n      name\n      address\n      city {\n        name\n        state {\n          name\n        }\n      }\n    }\n    slots {\n      edges {\n        node {\n          id\n          startsAt\n          endsAt\n          capacity\n        }\n      }\n    }\n    feeRequired\n    pointsToEarn\n  }\n":
    types.OpportunityFieldsFragmentDoc,
  "\n  query GetOpportunities(\n    $upcomingFilter: OpportunityFilterInput\n    $featuredFilter: OpportunityFilterInput\n    $allFilter: OpportunityFilterInput\n    $first: Int\n    $cursor: String\n  ) {\n    upcoming: opportunities(\n      filter: $upcomingFilter\n      sort: { createdAt: desc }\n      first: 5\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    \n    featured: opportunities(\n      filter: $featuredFilter\n      first: 5\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    \n    all: opportunities(\n      filter: $allFilter\n      first: $first\n      cursor: $cursor\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n  \n":
    types.GetOpportunitiesDocument,
  "\n  query GetOpportunity($id: ID!, $permission: CheckCommunityPermissionInput!) {\n    opportunity(id: $id, permission: $permission) {\n      id\n      title\n      description\n      body\n      category\n      capacity\n      pointsToEarn\n      feeRequired\n      requireApproval\n      publishStatus\n      image\n      files\n      createdAt\n      updatedAt\n      community {\n        id\n        name\n        image\n      }\n      createdByUser {\n        id\n        name\n        image\n        articlesAboutMe(first: 1) {\n          edges {\n            node {\n              id\n              title\n              introduction\n              thumbnail\n              createdAt\n            }\n          }\n        }\n        opportunitiesCreatedByMe(first: 5) {\n          edges {\n            node {\n              id\n              title\n              description\n              category\n              capacity\n              pointsToEarn\n              feeRequired\n              requireApproval\n              publishStatus\n              image\n              createdAt\n              updatedAt\n              slots {\n                edges {\n                  node {\n                    id\n                    startsAt\n                    endsAt\n                    participations {\n                      edges {\n                        node {\n                          id\n                          status\n                          user {\n                            id\n                            name\n                            image\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      place {\n        id\n        name\n        address\n        latitude\n        longitude\n        city {\n          name\n          state {\n            name\n          }\n        }\n      }\n      slots {\n        edges {\n          node {\n            id\n            startsAt\n            endsAt\n            participations {\n              edges {\n                node {\n                  id\n                  status\n                  user {\n                    id\n                    name\n                    image\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n":
    types.GetOpportunityDocument,
  "\n  query SearchOpportunities(\n    $filter: OpportunityFilterInput\n    $first: Int\n  ) {\n    opportunities(\n      filter: $filter\n      first: $first\n    ) {\n      edges {\n        node {\n          id\n          title\n          description\n          category\n          capacity\n          pointsToEarn\n          feeRequired\n          requireApproval\n          publishStatus\n          image\n          createdAt\n          updatedAt\n          place {\n            id\n            name\n            address\n            latitude\n            longitude\n            city {\n              name\n              state {\n                name\n              }\n            }\n          }\n          slots {\n            edges {\n              node {\n                id\n                startsAt\n                endsAt\n                capacity\n                participations {\n                  edges {\n                    node {\n                      id\n                      status\n                      user {\n                        id\n                        name\n                        image\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n":
    types.SearchOpportunitiesDocument,
  "\n  query GetUserWithDetailsAndPortfolios(\n    $id: ID!,\n    $first: Int,\n    $after: String,\n    $filter: PortfolioFilterInput,\n    $sort: PortfolioSortInput\n  ) {\n    user(id: $id) {\n      id\n      name\n      image\n      bio\n      sysRole\n      currentPrefecture\n      urlFacebook\n      urlInstagram\n      urlWebsite\n      urlX\n      urlYoutube\n      portfolios(\n        first: $first,\n        cursor: $after,\n        filter: $filter,\n        sort: $sort\n      ) {\n        edges {\n          node {\n            id\n            title\n            category\n            date\n            thumbnailUrl\n            source\n            place {\n              id\n              name\n            }\n            participants {\n              id\n              name\n              image\n            }\n          }\n          cursor\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n":
    types.GetUserWithDetailsAndPortfoliosDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query currentUser {\n    currentUser {\n      user {\n        id\n        name\n      }\n    }\n  }\n",
): (typeof documents)["\n  query currentUser {\n    currentUser {\n      user {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment OpportunityFields on Opportunity {\n    id\n    title\n    description\n    image\n    place {\n      id\n      name\n      address\n      city {\n        name\n        state {\n          name\n        }\n      }\n    }\n    slots {\n      edges {\n        node {\n          id\n          startsAt\n          endsAt\n          capacity\n        }\n      }\n    }\n    feeRequired\n    pointsToEarn\n  }\n",
): (typeof documents)["\n  fragment OpportunityFields on Opportunity {\n    id\n    title\n    description\n    image\n    place {\n      id\n      name\n      address\n      city {\n        name\n        state {\n          name\n        }\n      }\n    }\n    slots {\n      edges {\n        node {\n          id\n          startsAt\n          endsAt\n          capacity\n        }\n      }\n    }\n    feeRequired\n    pointsToEarn\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetOpportunities(\n    $upcomingFilter: OpportunityFilterInput\n    $featuredFilter: OpportunityFilterInput\n    $allFilter: OpportunityFilterInput\n    $first: Int\n    $cursor: String\n  ) {\n    upcoming: opportunities(\n      filter: $upcomingFilter\n      sort: { createdAt: desc }\n      first: 5\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    \n    featured: opportunities(\n      filter: $featuredFilter\n      first: 5\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    \n    all: opportunities(\n      filter: $allFilter\n      first: $first\n      cursor: $cursor\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n  \n",
): (typeof documents)["\n  query GetOpportunities(\n    $upcomingFilter: OpportunityFilterInput\n    $featuredFilter: OpportunityFilterInput\n    $allFilter: OpportunityFilterInput\n    $first: Int\n    $cursor: String\n  ) {\n    upcoming: opportunities(\n      filter: $upcomingFilter\n      sort: { createdAt: desc }\n      first: 5\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    \n    featured: opportunities(\n      filter: $featuredFilter\n      first: 5\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    \n    all: opportunities(\n      filter: $allFilter\n      first: $first\n      cursor: $cursor\n    ) {\n      edges {\n        node {\n          ...OpportunityFields\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetOpportunity($id: ID!, $permission: CheckCommunityPermissionInput!) {\n    opportunity(id: $id, permission: $permission) {\n      id\n      title\n      description\n      body\n      category\n      capacity\n      pointsToEarn\n      feeRequired\n      requireApproval\n      publishStatus\n      image\n      files\n      createdAt\n      updatedAt\n      community {\n        id\n        name\n        image\n      }\n      createdByUser {\n        id\n        name\n        image\n        articlesAboutMe(first: 1) {\n          edges {\n            node {\n              id\n              title\n              introduction\n              thumbnail\n              createdAt\n            }\n          }\n        }\n        opportunitiesCreatedByMe(first: 5) {\n          edges {\n            node {\n              id\n              title\n              description\n              category\n              capacity\n              pointsToEarn\n              feeRequired\n              requireApproval\n              publishStatus\n              image\n              createdAt\n              updatedAt\n              slots {\n                edges {\n                  node {\n                    id\n                    startsAt\n                    endsAt\n                    participations {\n                      edges {\n                        node {\n                          id\n                          status\n                          user {\n                            id\n                            name\n                            image\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      place {\n        id\n        name\n        address\n        latitude\n        longitude\n        city {\n          name\n          state {\n            name\n          }\n        }\n      }\n      slots {\n        edges {\n          node {\n            id\n            startsAt\n            endsAt\n            participations {\n              edges {\n                node {\n                  id\n                  status\n                  user {\n                    id\n                    name\n                    image\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetOpportunity($id: ID!, $permission: CheckCommunityPermissionInput!) {\n    opportunity(id: $id, permission: $permission) {\n      id\n      title\n      description\n      body\n      category\n      capacity\n      pointsToEarn\n      feeRequired\n      requireApproval\n      publishStatus\n      image\n      files\n      createdAt\n      updatedAt\n      community {\n        id\n        name\n        image\n      }\n      createdByUser {\n        id\n        name\n        image\n        articlesAboutMe(first: 1) {\n          edges {\n            node {\n              id\n              title\n              introduction\n              thumbnail\n              createdAt\n            }\n          }\n        }\n        opportunitiesCreatedByMe(first: 5) {\n          edges {\n            node {\n              id\n              title\n              description\n              category\n              capacity\n              pointsToEarn\n              feeRequired\n              requireApproval\n              publishStatus\n              image\n              createdAt\n              updatedAt\n              slots {\n                edges {\n                  node {\n                    id\n                    startsAt\n                    endsAt\n                    participations {\n                      edges {\n                        node {\n                          id\n                          status\n                          user {\n                            id\n                            name\n                            image\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      place {\n        id\n        name\n        address\n        latitude\n        longitude\n        city {\n          name\n          state {\n            name\n          }\n        }\n      }\n      slots {\n        edges {\n          node {\n            id\n            startsAt\n            endsAt\n            participations {\n              edges {\n                node {\n                  id\n                  status\n                  user {\n                    id\n                    name\n                    image\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query SearchOpportunities(\n    $filter: OpportunityFilterInput\n    $first: Int\n  ) {\n    opportunities(\n      filter: $filter\n      first: $first\n    ) {\n      edges {\n        node {\n          id\n          title\n          description\n          category\n          capacity\n          pointsToEarn\n          feeRequired\n          requireApproval\n          publishStatus\n          image\n          createdAt\n          updatedAt\n          place {\n            id\n            name\n            address\n            latitude\n            longitude\n            city {\n              name\n              state {\n                name\n              }\n            }\n          }\n          slots {\n            edges {\n              node {\n                id\n                startsAt\n                endsAt\n                capacity\n                participations {\n                  edges {\n                    node {\n                      id\n                      status\n                      user {\n                        id\n                        name\n                        image\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n",
): (typeof documents)["\n  query SearchOpportunities(\n    $filter: OpportunityFilterInput\n    $first: Int\n  ) {\n    opportunities(\n      filter: $filter\n      first: $first\n    ) {\n      edges {\n        node {\n          id\n          title\n          description\n          category\n          capacity\n          pointsToEarn\n          feeRequired\n          requireApproval\n          publishStatus\n          image\n          createdAt\n          updatedAt\n          place {\n            id\n            name\n            address\n            latitude\n            longitude\n            city {\n              name\n              state {\n                name\n              }\n            }\n          }\n          slots {\n            edges {\n              node {\n                id\n                startsAt\n                endsAt\n                capacity\n                participations {\n                  edges {\n                    node {\n                      id\n                      status\n                      user {\n                        id\n                        name\n                        image\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetUserWithDetailsAndPortfolios(\n    $id: ID!,\n    $first: Int,\n    $after: String,\n    $filter: PortfolioFilterInput,\n    $sort: PortfolioSortInput\n  ) {\n    user(id: $id) {\n      id\n      name\n      image\n      bio\n      sysRole\n      currentPrefecture\n      urlFacebook\n      urlInstagram\n      urlWebsite\n      urlX\n      urlYoutube\n      portfolios(\n        first: $first,\n        cursor: $after,\n        filter: $filter,\n        sort: $sort\n      ) {\n        edges {\n          node {\n            id\n            title\n            category\n            date\n            thumbnailUrl\n            source\n            place {\n              id\n              name\n            }\n            participants {\n              id\n              name\n              image\n            }\n          }\n          cursor\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetUserWithDetailsAndPortfolios(\n    $id: ID!,\n    $first: Int,\n    $after: String,\n    $filter: PortfolioFilterInput,\n    $sort: PortfolioSortInput\n  ) {\n    user(id: $id) {\n      id\n      name\n      image\n      bio\n      sysRole\n      currentPrefecture\n      urlFacebook\n      urlInstagram\n      urlWebsite\n      urlX\n      urlYoutube\n      portfolios(\n        first: $first,\n        cursor: $after,\n        filter: $filter,\n        sort: $sort\n      ) {\n        edges {\n          node {\n            id\n            title\n            category\n            date\n            thumbnailUrl\n            source\n            place {\n              id\n              name\n            }\n            participants {\n              id\n              name\n              image\n            }\n          }\n          cursor\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
